// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, first_name, last_name, email, nick_name, number_phone, day_of_birth, address , role, create_at, update_at, api_key, api_iat, api_exp, refresh_api_key, ref_api_iat, ref_api_exp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
encode(sha256(random()::text::bytea), 'hex'), $12, $13, $14, $15, $16)
RETURNING id, create_at, update_at, first_name, last_name, email, nick_name, number_phone, day_of_birth, address, role, api_key, api_iat, api_exp, refresh_api_key, ref_api_iat, ref_api_exp
`

type CreateUserParams struct {
	ID            uuid.UUID
	FirstName     string
	LastName      string
	Email         string
	NickName      sql.NullString
	NumberPhone   string
	DayOfBirth    sql.NullTime
	Address       sql.NullString
	Role          UserRole
	CreateAt      time.Time
	UpdateAt      time.Time
	ApiIat        time.Time
	ApiExp        time.Time
	RefreshApiKey string
	RefApiIat     time.Time
	RefApiExp     time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.NickName,
		arg.NumberPhone,
		arg.DayOfBirth,
		arg.Address,
		arg.Role,
		arg.CreateAt,
		arg.UpdateAt,
		arg.ApiIat,
		arg.ApiExp,
		arg.RefreshApiKey,
		arg.RefApiIat,
		arg.RefApiExp,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.NickName,
		&i.NumberPhone,
		&i.DayOfBirth,
		&i.Address,
		&i.Role,
		&i.ApiKey,
		&i.ApiIat,
		&i.ApiExp,
		&i.RefreshApiKey,
		&i.RefApiIat,
		&i.RefApiExp,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, create_at, update_at, first_name, last_name, email, nick_name, number_phone, day_of_birth, address, role, api_key, api_iat, api_exp, refresh_api_key, ref_api_iat, ref_api_exp FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.NickName,
		&i.NumberPhone,
		&i.DayOfBirth,
		&i.Address,
		&i.Role,
		&i.ApiKey,
		&i.ApiIat,
		&i.ApiExp,
		&i.RefreshApiKey,
		&i.RefApiIat,
		&i.RefApiExp,
	)
	return i, err
}

const updateAllAPIKeyOfUser = `-- name: UpdateAllAPIKeyOfUser :exec
UPDATE users
SET api_key = encode(sha256(random()::text::bytea), 'hex')
`

func (q *Queries) UpdateAllAPIKeyOfUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAllAPIKeyOfUser)
	return err
}
